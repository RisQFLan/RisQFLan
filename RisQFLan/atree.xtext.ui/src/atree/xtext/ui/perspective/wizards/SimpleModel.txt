// This is a hello world example of RisQFLan
// The general scenario is a login system that an attacker tries to hack

begin variables
end variables

// Here we specify all the things that can go wrong
// In particular succesful actions of attacker
begin attack nodes
	AccountHacked		// The attacker has managed to hack the account account has been hacked
	PhishingAttack		// The attacker has successfully carried out a phishing attack to gues the user's credentials
	BruteForceAttack		// The attacker has succeeeded with a brute-force attack to guess the users's credentials
end attack nodes

// Reactive defensive actions
begin defense nodes
	ChangeCredentials	// Change the user's credentials
end defense nodes

// Permanent defensive actions
begin countermeasure nodes
	BlockAttacker = {BruteForceAttack}  // A system that would automatically block an attacker upon detection of a brute-force attack
end countermeasure nodes
 
// The diagram specifies how defensive actions and attacker actions relate to each other
begin attack diagram
	AccountHacked -> {PhishingAttack,BruteForceAttack}	// Or-decomposition: the account can be hacked in two ways
	PhishingAttack -> {ChangeCredentials}				// Changing the credentials is a defensive reaction to a successful phishing attack
	BlockAttacker -> {BruteForceAttack}					// Blocking an attacker is permanent defending from brute-force attacks
end attack diagram

// Here we can specify classes of attackers with probabilistic behavior
begin attackers
	Fisher
	Bruto
end attackers

// The effectiveness of a defence depends on the class of attacker and the attack action
begin defense effectiveness
	ChangeCredentials(ALL,PhishingAttack) = 0.1			// The chance to change the credentials on time is 10%
end defense effectiveness

// Attacks may not be detected 
begin attack detection rates
	BruteForceAttack = 0.99 ,	// Brute-force attacks are easy to detect (99%)
	PhishingAttack   = 0.1		// Phishing attacks are more difficult to detect. If the user was scammed, he is unlikely to realise it on time (1%)
end attack detection rates

// Attributes of attacks are specified here
begin attributes
	Cost = {
		PhishingAttack=1,		// A phishing attempt is cheap (say 1 euro)
		BruteForceAttack=10		// A brute-force attempt is a bit more expensive (say 10 euros)
	}
end attributes

// One can here impose additional constraints on the attacker, e.g. based on his budget
begin quantitative constraints
{ value(Cost) < 20 }
end quantitative constraints

begin actions
end actions

begin action constraints
end action constraints

begin attacker behaviour
begin attack 
attacker = Fisher
states = emptyKnowledge, credentialsObtained, hacked
transitions = 
	// Attacker tries to get credentials
	emptyKnowledge -(succ(PhishingAttack),1,true)-> credentialsObtained,	// attacker succeeds
	emptyKnowledge -(fail(PhishingAttack),1000,true)-> emptyKnowledge, 	// attacker fails
	// Attacker tries to enter the system
	credentialsObtained -(succ(AccountHacked),1,true)-> hacked, 			// attacker uses the credentials to enter the account
	credentialsObtained -(fail(AccountHacked),1,true)-> hacked			// attacker fails to enter the system
end attack

begin attack 
attacker = Bruto
states = emptyKnowledgeB, credentialsObtainedB, hackedB
transitions = 
	// Attacker tries to get credentials
	emptyKnowledgeB -(succ(BruteForceAttack),1,true)-> credentialsObtainedB,	// attacker succeeds
	emptyKnowledgeB -(fail(BruteForceAttack),100,true)-> emptyKnowledgeB, 
	// Attacker tries to enter the system
	credentialsObtainedB -(succ(AccountHacked),1,true)-> hackedB, 
	//credentialsObtainedB -(fail(AccountHacked),1,true)-> hackedB
	credentialsObtainedB -(fail(AccountHacked),1,true)-> credentialsObtainedB
end attack
end attacker behaviour


// Here we specify the attacker we want to consider
begin init
	//Fisher
	Bruto
end init

//Finally, you can specify 3 types of analysis
//analysis: statistical analysis of quantitative properties
//exportDTMC: export the state space of the model (if finite) in a discrete time Markov chain in the format supported by the model checkers PRISM and STORM
//simulate: perform a simulation to debug your model

// In this particular case we are just interested in the likelihood of success of each attack
begin analysis
	query = eval from 1 to 600 by 20 :
	{
		AccountHacked,
		PhishingAttack,
		BruteForceAttack
	}
	// Statistical confidence
	default delta = 0.1
	alpha = 0.1
	// Parallelism to be exploited in the machine 
	parallelism = 2
end analysis


/*
begin exportDTMC 
file = "DTMC.pm"
label with "HackSucceeded" when has(AccountHacked)
end exportDTMC
*/

/*
begin simulate
seed = 1
steps = 10
file = "simulation.txt"
end simulate
*/
end model
