grammar atree.xtext.Bbt with org.eclipse.xtext.common.Terminals

generate bbt "http://www.xtext.atree/Bbt"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	modelDefinitions = ModelDefinition;
	
ModelDefinition:
	'begin' 'model' name = ID
		(
			//Variables
			(elements += Variables)
			
			//Nodes
			(elements += AttackNodes)
			
			(elements += DefenseNodes)
			
			(elements += CountermeasureNodes)
			//Relations
			
			(elements += Edges)
			
			(elements += Attackers)
			
			(elements += DefenseEffectiveness)
			
			(elements += AttackDetectionRates)
			
			(elements += Attributes)
			
			//Constraints
			(elements += QuantitativeConstraints)
			
			(elements += Actions)
			
			(elements += ActionConstraints)
			
//			(elements += AttackModels)
//			|
			
			(elements += AttackDiagram)
			
			(elements += InitialAttacks)
			
			
			//Analysis
			(
			(elements += Analysis)
			|
			(elements += Simulate)
			|
			(elements += ExportDTMC)
			)
		)
	'end' 'model'
;

Variables: {Variables}
	'begin' 'variables'  
	(variables += Variable)*
	'end' 'variables'
;

Simulate:
	'begin' 'simulate'
	'seed' '=' seed = NAT
	'steps' '=' steps = NAT
	'file' '=' file = STRING
	'end' 'simulate'
;
ExportDTMC:
	'begin' 'exportDTMC'
	'file' '=' file = STRING
	//'format' '=' format=FORMATS
	(labels+=Label)*
	'end' 'exportDTMC'
;

Label:{Label}
('label' 'with' name=STRING 'when' cond=AndBoolConstraintExpr)
;


//FORMATS:
//	'PRISM'|'STORM'
//;

Variable:
	name = ID '=' value = ArithmeticExpression
;

AttackNodes: {AttackNodes}
	'begin' 'attack' 'nodes'
		(attackNodes += AttackNode)*
	'end' 'attack' 'nodes'
;	

AttackNode:
	name = ID
;

DefenseNodes: {DefenseNodes}
	'begin' 'defense' 'nodes'
		(defenseNodes += DefenseNode)*
	'end' 'defense' 'nodes'
;

DefenseNode:
	name = ID
;

CountermeasureNodes: {CountermeasureNodes}
	'begin' 'countermeasure' 'nodes'
		(countermeasureNodes += CountermeasureNode)*
	'end' 'countermeasure' 'nodes'
;

CountermeasureNode:
	name = ID '=' '{' (triggers += [AttackNode]) (',' triggers += [AttackNode])* '}'
;

Node:
	AttackNode|DefenseNode|CountermeasureNode
;

Edges: {Edges}
	'begin' 'attack' 'diagram'
	(edges += EdgeType)*
	'end' 'attack' 'diagram'
;

EdgeType:
	ORRelation|ANDRelation|OANDRelation|KNRelation
;

ORRelation:
	parent = [Node] (('-' 'OR' '->') | ('->')) childrenSet=SetOfChildren
;

ANDRelation:
	parent = [Node] '-' 'AND' '->' childrenSet=SetOfChildren
;

OANDRelation:
	parent = [Node] '-' 'OAND' '->' childrenSeq=SeqOfChildren
;

KNRelation:
	parent = [Node] '-K' value = NAT '->' childrenSet=SetOfChildren
;

SeqOfChildren:
	'[' children+=[Node] (',' children+=[Node])* ']'
;

SetOfChildren:
	'{' children+=[Node] (',' children+=[Node])* '}'
;

Attributes: {Attributes}
	'begin' 'attributes'
		(attributes += Attribute)*
	'end' 'attributes'
;

Attribute:
	name = ID '=' '{' (values += AttributeValue) (',' values += AttributeValue)* '}'
;

AttributeValue:
	attribute = [Node] '=' value = ArithmeticExpression
;

AttackDetectionRates: {AttackDetectionRates}
	'begin' 'attack' 'detection' 'rates'
	((values += AttackDetectionRateValue) (',' values += AttackDetectionRateValue)*)?
	'end' 'attack' 'detection' 'rates'
;

AttackDetectionRateValue:
	attackNode = [AttackNode] '=' value = NumberLiteral
;

Attackers: {Attackers}
	'begin' 'attackers'
	(attackers += Attacker)*
	'end' 'attackers'
;

Attacker:
	name = ID
;

// BEGIN: Actions
Actions: {Actions}
	'begin' 'actions'  
	(actions += Action)*
	'end' 'actions'
;

Action:
	name = ID
;
ActionConstraints:{ActionConstraints}
	'begin' 'action' 'constraints'
	(actionConstraints+= ActionRequires)*
	'end' 'action' 'constraints'
;

ActionRequires: 
	'do' '(' action=StoreModifierActionOrReferenceToAction ')' '->'
	 	constraint=AndBoolConstraintExpr
;
// END: Actions

//BEGIN: Quantitative constraints
QuantitativeConstraints:{QuantitativeConstraints}
	'begin' 'quantitative' 'constraints'
	(quantitativeConstraints+= Constraint)*
	'end' 'quantitative' 'constraints'
;

Constraint returns BoolExpr:
	AndBoolConstraintExpr	
;

AndBoolConstraintExpr returns BoolExpr: 
	OrBoolConstraintExpr ({AndBoolConstraintExpr.left=current} 'and' right=OrBoolConstraintExpr)* 
;
OrBoolConstraintExpr returns BoolExpr: 
	ImpliesBoolConstraintExpr ({OrBoolConstraintExpr.left=current} 'or' right=ImpliesBoolConstraintExpr)* 
;
ImpliesBoolConstraintExpr returns BoolExpr: 
	PrimaryOrNotPrimaryBooleanConstraintExpr ({ImpliesBoolConstraintExpr.left=current} 'implies' right=PrimaryOrNotPrimaryBooleanConstraintExpr)* 
;

PrimaryOrNotPrimaryBooleanConstraintExpr returns BoolExpr:
	PrimaryBooleanConstraintExpr | NotConstraintExpr //| ActionRequires
;

NotConstraintExpr returns BoolExpr:
	'!' PrimaryBooleanConstraintExpr {NotConstraintExpr.left=current}
;

PrimaryBooleanConstraintExpr returns BoolExpr:
 PrimaryConstraint   
 | '(' AndBoolConstraintExpr ')' 
 ;

PrimaryConstraint: 
	HasNode | AllowedNode |
	FalseConstraint | TrueConstraint
	| DisequationOfPredicateExpr
;

TrueConstraint: {TrueConstraint} //; returns STRING:{STRING}
	"true"
;
FalseConstraint: {FalseConstraint} //; returns STRING:{STRING}
	"false"
;
	
//Try to understand why we have to uses curly brackets here.
DisequationOfPredicateExpr:
	'{' lhs= PredicateExpr comp=Comp rhs= PredicateExpr '}'
;

Comp: //returns STRING:{STRING}
	('<' | '>' | '<=' | '>=' | '==' | '!=') 
;

PredicateExpr returns Expression:
	AdditionWithPredicates
;

AdditionWithPredicates returns Expression:
 SubtractionWithPredicates ({AdditionWithPredicates.left=current} '+' right=SubtractionWithPredicates)* 
 ; 
 
SubtractionWithPredicates returns Expression:
 MultiplicationWithPredicates ({SubtractionWithPredicates.left=current} '-' right=MultiplicationWithPredicates)* 
 ; 

MultiplicationWithPredicates returns Expression:
 PrimaryOrMinusPrimaryWithPredicates ({MultiplicationWithPredicates.left=current} '*' right=PrimaryOrMinusPrimaryWithPredicates)*
 ; 

PrimaryOrMinusPrimaryWithPredicates returns Expression:
	PrimaryWithPredicates | MinusPrimaryWithPredicates
;

MinusPrimaryWithPredicates returns Expression:
	'-' PrimaryWithPredicates {MinusPrimaryWithPredicates.left=current}
;

PrimaryWithPredicates returns Expression:
 NumberLiteral  
 | Predicate
 | RefToVariable
 | '(' AdditionWithPredicates ')' 
;

RefToVariable : //returns Expression
	varname = [Variable]
;

Predicate :
	'value(' predicate = [Attribute] ')' //ambiguity quick fix 
;
//END: QUANTITATIVE CONTRAINTS

// BEGIN: Process Module 
// BEGIN: Auto-gen
DefenseEffectiveness: {DefenseEffectiveness}
	'begin' 'defense' 'effectiveness'
	(defenseEffectiveness += DefenseEffectivenessValues)* 
	'end' 'defense' 'effectiveness'
;

DefenseEffectivenessValues:
	defenseNode = [Node] '(' defenseEffectivenessAttackers = DefenseEffectivenessAttackers ',' 
		attackNodes = DefenseEffectivenessAttackNodes ')' '=' value = NumberLiteral
;

DefenseEffectivenessAttackers: {DefenseEffectivenessAttackers}
	( 'ALL' | attackers += [Attacker] | ( '{' attackers += [Attacker] (',' attackers += [Attacker] )* '}' ) )
;

DefenseEffectivenessAttackNodes: {DefenseEffectivenessAttackNodes}
	( 'ALL' | nodes += [AttackNode] | ( '{' nodes += [AttackNode] (',' nodes += [AttackNode] )* '}' ) )
;

//ProbabilityValue:
//	node = [Node] '=' value = NumberLiteral
//;

//AttackModels: {AttackModels}
//	'begin' 'attack' 'models'
//	(attackModels += AttackModel)*
//	'end' 'attack' 'models'
//;
//
//AttackModel:
//	'begin' 'attack'
//		'attacker' '=' attacker = [Attacker] 
//		'actions' '=' '{' (values += AttackModelState) (',' values += AttackModelState)* '}'
//	'end' 'attack'
//;
//
//AttackModelState:
//	'(' node = [AttackNode] ',' rate = ArithmeticExpression 
//	optionalparameters = OptionalAttackParameters ')'
//;
//
//OptionalAttackParameters:{OptionalAttackParameters}
//	(',' successFailure = SuccessFailure)? (',' '{' (sideEffects=SideEffects)? '}')?
//;
//
//SuccessFailure:
//	'(' success = ArithmeticExpression ',' failure = ArithmeticExpression ')'
//;

SideEffects:
	effects+=SideEffect (',' effects+=SideEffect)*
;

SideEffect: {SideEffect}
	refToVar=RefToVariable '=' value = PredicateExpr
;

InitialAttacks: {InitialAttacks}
	'begin' 'init'  
	value = InitialAttack
//	(values += InitialAttack)*
//	'initialAttacks' '=' '{' ((initialKnowledge += [AttackNode]) (',' initialKnowledge += [AttackNode])*)? '}'
//	'selectedAttackers' '=' (attackers+=[Attacker] ('|' attackers+=[Attacker])*)
	'end' 'init'
;

InitialAttack:
	attacker = [Attacker] ('=' '{' (initialAttacks += [AttackNode]) (',' initialAttacks += [AttackNode])* '}')?
;

// END: Auto-gen

AttackDiagram: {AttackDiagram}
	'begin' 'attacker' 'behaviour'  
	(attacks += AttacksOfDiagram)*
	'end' 'attacker' 'behaviour'
;

AttacksOfDiagram:
	'begin' 'attack' 
	'attacker' '=' attacker = [Attacker] 
	'states' '=' states=States
	'transitions' '=' transitions=Transitions 
	'end' 'attack'
;
States:
	states += ProcessState (',' states += ProcessState)*	
;
ProcessState:
	name=ID
;
Transitions:
	transitions+=ProcessTransition (',' transitions+=ProcessTransition)*
;
ProcessTransition:
	source=[ProcessState] '-' '('
		action=AskOrStoreModifierActionOrReferenceToAction ',' 
		rate=ArithmeticExpression 
		( ',' '{' (sideEffects=SideEffects) '}')?
		( ',' actionGuard = Constraint)?
//		( ',' '{' (actionGuards=ActionGuards) '}')?
	')' '->'
	target=[ProcessState]//ReferenceToProcessStateOrZeroProcess
;

//ActionGuards:
//	guards+=AndBoolConstraintExpr (',' guards+=AndBoolConstraintExpr)*
//;

//ReferenceToProcessStateOrZeroProcess:
//	ReferenceToProcessState|ZeroProcess
//;
//ZeroProcess:{ZeroProcess}
//	'nil'
//;
//ReferenceToProcessState:
//	value=[ProcessState]
//;

StoreModifierActionOrReferenceToActionOrToNode:
	StoreModifierActions //| ReferenceToActionOrNode
;

AskOrStoreModifierActionOrReferenceToAction:
	StoreModifierActionOrReferenceToAction 
;
StoreModifierActionOrReferenceToAction:
	StoreModifierActions | ReferenceToAction 
;

StoreModifierActions:
	AddAction  | RemoveAction | FailAction | QueryAction
;

AddAction:
	('add'|'succ') '(' node=[AttackNode] ')'
;

RemoveAction:
	'remove' '(' node=[AttackNode] ')'
;

FailAction:
	'fail' '(' node=[AttackNode] ')'
;

QueryAction:
	'query' '(' node=[Node] ')'
;

ActionOrNode:
	AttackNode | CountermeasureNode | DefenseNode | Action
;

//ReferenceToActionOrNode:
//	value = [ActionOrNode]
//;

ReferenceToAction:
	value = [Action]
;
// END: Process module 



// BEGIN: Analysis module 
Analysis:
	'begin' 'analysis'
	
	(('queryFile' '=' queryFile = STRING
	 'delta' '=' delta = STRING) 
		|
	 ('query' '=' 'eval' query= MultiQuatexQuery
	  'default' 'delta' '=' defaultDelta = ArithmeticExpression	
	 )
	)
	'alpha' '=' alpha = POSITIVEINTORREAL
	(
		'parallelism' '=' parallelism=NAT |
		'servers' '=' serversFile=STRING
	)
	('simulations' 'block' '=' blockSize=NAT)?
	('intermediate' 'results' '=' ir=NAT)?
	('logs' '=' logFile=STRING)?
	'end' 'analysis'
;

MultiQuatexQuery:
	NonParametricQueries|ParametricQuery|SteadyStateQuery
;
NonParametricQueries:
	queries+=NonParametricQuery (',' queries+=NonParametricQuery)*
;
	
NonParametricQuery:
	'when' cond=ConditionOfQuery ':' mqObs=SetOfObs
;
ParametricQuery:
    'from' from=(NAT|ZERO) 'to' to=NAT 'by' step=NAT ':' mqObs=SetOfObs 
;
SteadyStateQuery:
	'at' 'steady-state' 'by' algorithm=("BM"|"RD") ':' mqObs=SetOfObs
;

ConditionOfQuery returns BoolExpr:
	AndBoolConditionOfQueryExpr	
;

AndBoolConditionOfQueryExpr returns BoolExpr: 
	OrBoolConditionOfQueryExpr ({AndBoolConditionOfQueryExpr.left=current} 'and' right=OrBoolConditionOfQueryExpr)* 
;
OrBoolConditionOfQueryExpr returns BoolExpr: 
	ImpliesBoolConditionOfQueryExpr ({OrBoolConditionOfQueryExpr.left=current} 'or' right=ImpliesBoolConditionOfQueryExpr)* 
;
ImpliesBoolConditionOfQueryExpr returns BoolExpr: 
	PrimaryOrNotPrimaryBooleanConditionOfQueryExpr ({ImpliesBoolConditionOfQueryExpr.left=current} 'implies' right=PrimaryOrNotPrimaryBooleanConditionOfQueryExpr)* 
;

PrimaryOrNotPrimaryBooleanConditionOfQueryExpr returns BoolExpr:
	PrimaryBooleanConditionOfQueryExpr | NotConditionOfQueryExpr
;

NotConditionOfQueryExpr returns BoolExpr:
	'!' PrimaryBooleanConditionOfQueryExpr {NotConditionOfQueryExpr.left=current}
;
PrimaryBooleanConditionOfQueryExpr returns BoolExpr:
 PrimaryConditionOfQuery   
 | '(' AndBoolConditionOfQueryExpr ')' 
 ;

PrimaryConditionOfQuery: 
	HasNode |// AllowedNode |
	FalseConditionOfQuery | TrueConditionOfQuery
	| DisequationOfPredicateExprForConditionOfQuery
;
HasNode: 
	'has' '(' node=[AttackNode] ')'
;
AllowedNode:
	'allowed' '(' node=[AttackNode] ')'
;
TrueConditionOfQuery: {TrueConditionOfQuery}
	"true"
;
FalseConditionOfQuery: {FalseConditionOfQuery} //; returns STRING:{STRING}
	"false"
;
DisequationOfPredicateExprForConditionOfQuery: 
	'{' lhs=PredicateExprForConditionOfQuery  comp=Comp rhs= PredicateExprForConditionOfQuery '}'
;

PredicateExprForConditionOfQuery returns Expression:
	AdditionWithPredicatesAndNodesForQuery
;
AdditionWithPredicatesAndNodesForQuery returns Expression:
 SubtractionWithPredicatesAndNodesForQuery ({AdditionWithPredicatesAndNodesForQuery.left=current} '+' right=SubtractionWithPredicatesAndNodesForQuery)* 
 ; 
 
SubtractionWithPredicatesAndNodesForQuery returns Expression:
 MultiplicationWithPredicatesAndNodesForQuery ({SubtractionWithPredicatesAndNodesForQuery.left=current} '-' right=MultiplicationWithPredicatesAndNodesForQuery)* 
 ; 

MultiplicationWithPredicatesAndNodesForQuery returns Expression:
 PrimaryOrMinusPrimaryWithPredicatesAndNodesForQuery ({MultiplicationWithPredicatesAndNodesForQuery.left=current} '*' right=PrimaryOrMinusPrimaryWithPredicatesAndNodesForQuery)*
 ; 

PrimaryOrMinusPrimaryWithPredicatesAndNodesForQuery returns Expression:
	PrimaryWithPredicatesAndNodesForQuery | MinusPrimaryWithPredicatesAndNodesForQuery
;

MinusPrimaryWithPredicatesAndNodesForQuery returns Expression:
	'-' PrimaryWithPredicatesAndNodesForQuery {MinusPrimaryWithPredicatesAndNodesForQuery.left=current}
;

PrimaryWithPredicatesAndNodesForQuery returns Expression:
 NumberLiteral  
 | Predicate
 | Step
 | RefToVariableOrNode
 | '(' AdditionWithPredicatesAndNodesForQuery ')' 
;
Step:{Step}
	'steps'
;
VariableOrNode:
	Variable|AttackNode|DefenseNode|CountermeasureNode
;
RefToVariableOrNode:
	value=[VariableOrNode]
;
AdditionWithPredicatesAndNodesWithOptionalDelta:
	obs=AdditionWithPredicatesAndNodesForQuery ('[' 'delta' '=' delta= ArithmeticExpression ']')?
;

SetOfObs:
	'{' obs+=AdditionWithPredicatesAndNodesWithOptionalDelta (',' obs+=AdditionWithPredicatesAndNodesWithOptionalDelta)* '}'
;
// END: Analysis module 

// BEGIN: Arithmetic expressions 
ArithmeticExpression returns Expression:
	Addition 
;

Addition returns Expression:
 Subtraction ({Addition.left=current} '+' right=Subtraction)* 
 ; 
 
Subtraction returns Expression:
 Multiplication ({Subtraction.left=current} '-' right=Multiplication)*; 

Multiplication returns Expression:
 Division ({Multiplication.left=current} '*' right=Division)*; 

Division returns Expression:
 Power ({Division.left=current} '/' right=Power)*; 
  
Power returns Expression:
 PrimaryOrMinusPrimary ({Power.left=current} '^' right=PrimaryOrMinusPrimary)* ; 

PrimaryOrMinusPrimary returns Expression:
	Primary | MinusPrimary
;

MinusPrimary returns Expression:
	'-' Primary {MinusPrimary.left=current}
;

Primary returns Expression:
 NumberLiteral  
 | '(' Addition ')' ;
 
NumberLiteral:
 value = NONNEGATIVEINTORREAL
;

//PROBABILITY returns ecore::EDouble: ZERO | ZEROTOONE;
//terminal ZEROTOONE returns ecore::EDouble:
//	('0' '.' INT) | ('1' ('.' '0')?)
//;

NONNEGATIVEINTORREAL returns ecore::EDouble: ZERO | POSITIVEINTORREAL;
POSITIVEINTORREAL returns ecore::EDouble: NAT | NONNEGATIVEREAL;
terminal NONNEGATIVEREAL returns ecore::EDouble: 
	(
		(INT '.' INT) |
		//
		(INT '.' ('0'..'9') (('0'..'9')?) 'e' INT ) |
		(INT '.' ('0'..'9') (('0'..'9')?) 'E' INT ) |
		(INT '.' ('0'..'9') (('0'..'9')?) 'e' SIGN INT ) |
		(INT '.' ('0'..'9') (('0'..'9')?) 'E' SIGN INT ) |
		//
		(INT  'e' INT ) |
		(INT  'E' INT ) |
		(INT  'e' SIGN INT ) |
		(INT  'E' SIGN INT )
		)	
;
terminal SIGN :
	'-' | '+' 
;
terminal NAT returns ecore::EInt: (('1'..'9') (INT?));//terminal NAT returns ecore::EInt: (('1'..'9') ('0'..'9')*);
terminal ZERO returns ecore::EInt: '0';
// END: Arithmetic expressions 